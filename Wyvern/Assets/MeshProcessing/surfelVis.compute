#pragma kernel CSMain
#pragma kernel GetCandidates
#pragma kernel CoverageNoFocalDepth
#pragma kernel CoverageSetNoFocalDepth

struct surfelData {
	float3 position;
	float3 normal;
};

uint surfelCount;

Texture2D<float4> depthBuffer;
SamplerState samplerdepthBuffer;

StructuredBuffer<surfelData> surfels;
RWStructuredBuffer<int> consumed;
RWStructuredBuffer<float4> results;

float4x4 modelMat;
float4x4 projVP;
float3 projWorldPos;

[numthreads(32,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
	uint surfelId = id.x;

	if (surfelId > surfelCount) {
		return;
	}

	int consumedId = consumed[surfelId];
	float3 col;

	if (consumedId == 0) {
		results[surfelId] = float4(1, 0, 0, 1);
		return;
	}

	float cR = ((consumedId + 8) * 150) % 255;
	float cG = ((consumedId + 8) * 560) % 255;
	float cB = ((consumedId + 8) * 120) % 255;

	cR /= 255.0;
	cG /= 255.0;
	cB /= 255.0;

	// imgD[(i) * 3 + 0] = ((lastGroup + 1) * 15) % 255;
	// imgD[(i) * 3 + 1] = ((lastGroup + 1) * 561) % 255;
	// imgD[(i) * 3 + 2] = ((lastGroup + 1) * 12) % 255;
	
	results[surfelId] = float4(cR, cG, cB, 1);
	return;

	if (consumedId == 1) {
		col = float3(1, 1, 1);
	} else if (consumedId == 2) {
		col = float3(1, 0, 0);
	} else {
		col = float3(0.5, 0.2, 0.1);
	}
	
	results[surfelId] = float4(col, 1);
	return;

	// NOTE: Only visualize current consumed surfels.
	if (consumed[surfelId] == 0) {
		results[surfelId] = float4(0.5, 0.2, 0.1, 1);
		return;
	}

	surfelData s = surfels[surfelId];

	float maxAngle = 30.0;

	float3 worldPos = mul(modelMat, float4(s.position, 1)).xyz;
	float3 worldNormal = mul(modelMat, float4(s.normal, 0)).xyz;

	float4 projClipPos = mul(projVP, float4(worldPos, 1));
	float4 projClipPosPreW = projClipPos;
	projClipPos /= projClipPos.w;	
	// float projToPixelDepth = length(worldPos - projWorldPos);

	if (projClipPos.z > 0 && projClipPos.x > -1.0 && projClipPos.x < 1.0 && projClipPos.y > -1.0 && projClipPos.y < 1.0) {
		float2 projUv = projClipPos.xy * 0.5 + 0.5;
		float2 texUv = float2(projUv.x, 1.0 - projUv.y);

		float depthPre = depthBuffer.SampleLevel(samplerdepthBuffer, texUv, 0).r;

		if (projClipPosPreW.z > depthPre - 0.001) {
			float projDistance = length(worldPos - projWorldPos);
			float3 projDir = normalize(projWorldPos - worldPos);
			float angleCos = saturate(dot(worldNormal, projDir));
			float angleDegree = acos(angleCos) * 57.2958;

			if (angleDegree < maxAngle) {
				if (projDistance <= 20.15 && projDistance >= 19.85) {
					results[surfelId] = float4(0, 1, 0, 1);
					consumed[surfelId] = 1;
					return;
				}

				results[surfelId] = float4(0, 1, 1, 1);
				return;
			}

			results[surfelId] = float4(1, 0, 1, 1);
			return;
		}
		
		results[surfelId] = float4(0, 0, 1, 1);
		return;
	}

	results[surfelId] = float4(1, 0, 0, 1);
	// results[surfelId] = float4(s.position / 5.5, 1);
	// results[surfelId] = float4(1, 0, 0, 1);
}

RWStructuredBuffer<int> candidateCounter;
RWStructuredBuffer<float> candidateMeta;

[numthreads(32,1,1)]
void GetCandidates (uint3 id : SV_DispatchThreadID) {
	uint surfelId = id.x;

	if (surfelId > surfelCount) {
		return;
	}

	if (consumed[surfelId] != 0) {
		results[surfelId] = float4(1, 1, 1, 1);
		return;
	}

	surfelData s = surfels[surfelId];

	float3 worldPos = mul(modelMat, float4(s.position, 1)).xyz;
	float3 worldNormal = mul(modelMat, float4(s.normal, 0)).xyz;

	float maxAngle = 30.0;

	float4 projClipPos = mul(projVP, float4(worldPos, 1));
	float4 projClipPosPreW = projClipPos;
	projClipPos /= projClipPos.w;	
	// float projToPixelDepth = length(worldPos - projWorldPos);

	if (projClipPos.z > 0 && projClipPos.x > -1.0 && projClipPos.x < 1.0 && projClipPos.y > -1.0 && projClipPos.y < 1.0) {
		float2 projUv = projClipPos.xy * 0.5 + 0.5;
		float2 texUv = float2(projUv.x, 1.0 - projUv.y);

		float depthPre = depthBuffer.SampleLevel(samplerdepthBuffer, texUv, 0).r;

		if (projClipPosPreW.z > depthPre - 0.001) {
			float projDistance = length(worldPos - projWorldPos);
			float3 projDir = normalize(projWorldPos - worldPos);
			float angleCos = saturate(dot(worldNormal, projDir));
			float angleDegree = acos(angleCos) * 57.2958;

			if (angleDegree < maxAngle) {
				if (projDistance <= 20.15 && projDistance >= 19.85) {

					int cCounter = 0;
					InterlockedAdd(candidateCounter[0], 1, cCounter);

					// results[surfelId] = float4(0, 1, 0, 1);
					// consumed[surfelId] = 1;
					return;
				}

				// results[surfelId] = float4(0, 1, 1, 1);
				return;
			}

			// results[surfelId] = float4(1, 0, 1, 1);
			return;
		}
		
		// results[surfelId] = float4(0, 0, 1, 1);
		return;
	}

	results[surfelId] = float4(1, 0, 0, 1);
	// results[surfelId] = float4(s.position / 5.5, 1);
	// results[surfelId] = float4(1, 0, 0, 1);
}

int coverageValue;

[numthreads(32,1,1)]
void CoverageNoFocalDepth(uint3 id : SV_DispatchThreadID) {
	uint surfelId = id.x;

	if (surfelId > surfelCount) {
		return;
	}

	if (consumed[surfelId] != 0) {
		// results[surfelId] = float4(1, 1, 1, 1);
		return;
	}

	surfelData s = surfels[surfelId];

	float maxAngle = 30.0;

	float3 worldPos = mul(modelMat, float4(s.position, 1)).xyz;
	float3 worldNormal = mul(modelMat, float4(s.normal, 0)).xyz;

	float4 projClipPos = mul(projVP, float4(worldPos, 1));
	float4 projClipPosPreW = projClipPos;
	projClipPos /= projClipPos.w;	
	// float projToPixelDepth = length(worldPos - projWorldPos);

	if (projClipPos.z > 0 && projClipPos.x > -1.0 && projClipPos.x < 1.0 && projClipPos.y > -1.0 && projClipPos.y < 1.0) {
		float2 projUv = projClipPos.xy * 0.5 + 0.5;
		float2 texUv = float2(projUv.x, 1.0 - projUv.y);

		float depthPre = depthBuffer.SampleLevel(samplerdepthBuffer, texUv, 0).r;

		if (projClipPosPreW.z > depthPre - 0.001) {
			float projDistance = length(worldPos - projWorldPos);
			float3 projDir = normalize(projWorldPos - worldPos);
			float angleCos = saturate(dot(worldNormal, projDir));
			float angleDegree = acos(angleCos) * 57.2958;

			if (angleDegree < maxAngle) {
				// results[surfelId] = float4(0, 1, 0, 1);
				// consumed[surfelId] = 1;
				InterlockedAdd(candidateCounter[coverageValue], 1);
				return;
			}

			// results[surfelId] = float4(1, 0, 1, 1);
			return;
		}
		
		// results[surfelId] = float4(0, 0, 1, 1);
		return;
	}

	results[surfelId] = float4(1, 0, 0, 1);
	// results[surfelId] = float4(s.position / 5.5, 1);
	// results[surfelId] = float4(1, 0, 0, 1);
}

[numthreads(32,1,1)]
void CoverageSetNoFocalDepth(uint3 id : SV_DispatchThreadID) {
	uint surfelId = id.x;

	if (surfelId > surfelCount) {
		return;
	}

	if (consumed[surfelId] != 0) {
		// results[surfelId] = float4(1, 1, 1, 1);
		return;
	}

	surfelData s = surfels[surfelId];

	float maxAngle = 30.0;

	float3 worldPos = mul(modelMat, float4(s.position, 1)).xyz;
	float3 worldNormal = mul(modelMat, float4(s.normal, 0)).xyz;

	float4 projClipPos = mul(projVP, float4(worldPos, 1));
	float4 projClipPosPreW = projClipPos;
	projClipPos /= projClipPos.w;	
	// float projToPixelDepth = length(worldPos - projWorldPos);

	if (projClipPos.z > 0 && projClipPos.x > -1.0 && projClipPos.x < 1.0 && projClipPos.y > -1.0 && projClipPos.y < 1.0) {
		float2 projUv = projClipPos.xy * 0.5 + 0.5;
		float2 texUv = float2(projUv.x, 1.0 - projUv.y);

		float depthPre = depthBuffer.SampleLevel(samplerdepthBuffer, texUv, 0).r;

		if (projClipPosPreW.z > depthPre - 0.001) {
			float projDistance = length(worldPos - projWorldPos);
			float3 projDir = normalize(projWorldPos - worldPos);
			float angleCos = saturate(dot(worldNormal, projDir));
			float angleDegree = acos(angleCos) * 57.2958;

			if (angleDegree < maxAngle) {
				// results[surfelId] = float4(0, 1, 0, 1);
				consumed[surfelId] = coverageValue;
				// InterlockedAdd(candidateCounter[0], 1);
				return;
			}

			// results[surfelId] = float4(1, 0, 1, 1);
			return;
		}
		
		// results[surfelId] = float4(0, 0, 1, 1);
		return;
	}

	results[surfelId] = float4(1, 0, 0, 1);
	// results[surfelId] = float4(s.position / 5.5, 1);
	// results[surfelId] = float4(1, 0, 0, 1);
}